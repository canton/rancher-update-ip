#!/usr/bin/env ruby

require File.expand_path('config/boot', File.dirname(__FILE__))
require File.expand_path('lib/aws_metadata', File.dirname(__FILE__))
require File.expand_path('lib/rancher_client', File.dirname(__FILE__))

include Logging.globally(:log)

scheduler = Rufus::Scheduler.singleton

log.info 'Starting job - rancher-update-ip'

# Shutdown procedure, wait for running jobs then exit
shutdown = proc do
  # Using a thread otherwise lock won't work
  Thread.new { log.debug 'Scheduler shutdown initiated' }
  scheduler.shutdown(:wait)
end

# Intercept INT and TERM signal initiating a shutdown
trap :INT, &shutdown
trap :TERM, &shutdown

scheduler.interval Settings.period, first: :now do
  begin
    awsMetadata = AwsMetadata.new
    rancher_client = RancherClient.new

    result = rancher_client.update_public_ip(awsMetadata.hostname, awsMetadata.public_ip)
    rancher_client.update_dns if result
  rescue => e
    Raygun.track_exception(e)
    raise
  end
end

scheduler.join
log.info 'All jobs have been terminated, exiting'
